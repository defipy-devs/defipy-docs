{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e789441b-d074-48ef-a9c9-92f6aa304f95",
   "metadata": {},
   "outputs": [],
   "source": [
    "from uniswappy import *\n",
    "import numpy as np\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "11f3151e-6662-4c9c-8c51-54dcbc5f4319",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from math import sqrt\n",
    "\n",
    "# class UniswapImpLoss:\n",
    "#     def __init__(self, lp, lp_init_amt):\n",
    "#         self.lp = lp\n",
    "#         self.lp_init = lp_init_amt\n",
    "#         self.x_tkn_init = self._calc_dx(dL)\n",
    "#         self.y_tkn_init = self._calc_dy(dL)\n",
    "\n",
    "#     def current_position_value(self, tkn, lwr_tick = None, upr_tick = None):\n",
    "#         \"\"\"Calculate the current value of the LP position in terms of input token.\"\"\" \n",
    "#         return LPQuote(False).get_amount_from_lp(lp, tkn, self.lp_init, lwr_tick, upr_tick)\n",
    "\n",
    "#     def hold_value(self, tkn):\n",
    "#         \"\"\"Calculate the value if initial tokens were held.\"\"\"\n",
    "#         tokens = lp.factory.token_from_exchange[lp.name]\n",
    "#         if(tkn.token_name == lp.token0):\n",
    "#             current_price = self.lp.get_price(tokens[lp.token1])\n",
    "#             val = self.y_tkn_init*current_price + self.x_tkn_init\n",
    "#         elif(tkn.token_name == lp.token1):   \n",
    "#             current_price = self.lp.get_price(tokens[lp.token0])\n",
    "#             val = self.x_tkn_init * current_price + self.y_tkn_init\n",
    "#         return val \n",
    "\n",
    "#     def get_init_amt(self, tkn):\n",
    "#         if(tkn.token_name == lp.token0):\n",
    "#             return self.x_tkn_init\n",
    "#         elif(tkn.token_name == lp.token1):  \n",
    "#             return self.y_tkn_init\n",
    "\n",
    "#     def apply(self, lwr_tick = None, upr_tick = None, fees = False):\n",
    "\n",
    "#         if(fees):\n",
    "#             \"\"\"Calculate returns based current position.\"\"\"\n",
    "#             tokens = lp.factory.token_from_exchange[lp.name]\n",
    "#             x_tkn = tokens[lp.token0]\n",
    "#             v_hold = self.hold_value(x_tkn)\n",
    "#             v_pos = self.current_position_value(x_tkn, lwr_tick, upr_tick)\n",
    "#             iloss = (v_pos - v_hold)/v_hold\n",
    "#         else:\n",
    "#             \"\"\"Calculate IL based on price ratio.\"\"\"\n",
    "#             tokens = lp.factory.token_from_exchange[lp.name]\n",
    "#             x_tkn = tokens[lp.token0]\n",
    "#             y_tkn = tokens[lp.token1]\n",
    "#             initial_price = self.y_tkn_init / self.x_tkn_init\n",
    "#             current_price = self.lp.get_price(x_tkn)\n",
    "#             alpha = current_price / initial_price\n",
    "#             if(self.lp.version == 'V2'):\n",
    "#                 iloss = self.calc_iloss(alpha)\n",
    "#             elif(self.lp.version == 'V3'):    \n",
    "#                 r = self.calc_price_range(lwr_tick, upr_tick)\n",
    "#                 iloss = self.calc_iloss(alpha, r)       \n",
    "\n",
    "#         return iloss\n",
    "\n",
    "#     def calc_iloss(self, alpha, r = None):\n",
    "#         if(r == None):\n",
    "#             return (2 * sqrt(alpha)) / (1 + alpha) - 1\n",
    "#         else:\n",
    "#             iloss = (2 * sqrt(alpha)) / (1 + alpha) - 1\n",
    "#             scale =  sqrt(r)/(sqrt(r)-1)\n",
    "#             return scale*iloss \n",
    "\n",
    "#     def calc_price_range(self, lwr_tick, upr_tick):\n",
    "#         Q96 = 2**96\n",
    "#         sqrtp_cur = lp.slot0.sqrtPriceX96/Q96\n",
    "#         sqrtp_pb = TickMath.getSqrtRatioAtTick(upr_tick)/Q96\n",
    "#         sqrtp_pa = TickMath.getSqrtRatioAtTick(lwr_tick)/Q96\n",
    "#         ra = sqrtp_pa**2/sqrtp_cur**2\n",
    "#         rb = sqrtp_pb**2/sqrtp_cur**2    \n",
    "#         return sum([ra,rb])/2\n",
    "\n",
    "#     def _calc_dx(self, dL):\n",
    "#         if(self.lp.version == 'V2'):\n",
    "#             return self._calc_univ2_dx(dL)\n",
    "#         elif(self.lp.version == 'V3'): \n",
    "#             return self._calc_univ3_dx(dL)\n",
    "\n",
    "#     def _calc_dy(self, dL):\n",
    "#         if(self.lp.version == 'V2'):\n",
    "#             return self._calc_univ2_dy(dL)\n",
    "#         elif(self.lp.version == 'V3'): \n",
    "#             return self._calc_univ3_dy(dL)\n",
    "        \n",
    "#     def _calc_univ2_dx(self, dL):\n",
    "#         tokens = lp.factory.token_from_exchange[lp.name]\n",
    "#         x_tkn = tokens[lp.token0]\n",
    "#         x = lp.get_reserve(x_tkn)\n",
    "#         L = lp.get_liquidity()\n",
    "#         return x*dL/L\n",
    "\n",
    "#     def _calc_univ2_dy(self, dL):\n",
    "#         tokens = lp.factory.token_from_exchange[lp.name]\n",
    "#         y_tkn = tokens[lp.token1]\n",
    "#         y = lp.get_reserve(y_tkn)\n",
    "#         L = lp.get_liquidity()\n",
    "#         return y*dL/L\n",
    "    \n",
    "#     def _calc_univ3_dx(self, dL):\n",
    "#         Q96 = 2**96\n",
    "#         sqrtp_pb = TickMath.getSqrtRatioAtTick(upr_tick)/Q96\n",
    "#         sqrtp_cur = lp.slot0.sqrtPriceX96/Q96\n",
    "#         dPx = (1/sqrtp_cur - 1/sqrtp_pb)     \n",
    "#         return dL*dPx\n",
    "\n",
    "#     def _calc_univ3_dy(self, dL):\n",
    "#         Q96 = 2**96\n",
    "#         sqrtp_pa = TickMath.getSqrtRatioAtTick(lwr_tick)/Q96\n",
    "#         sqrtp_cur = lp.slot0.sqrtPriceX96/Q96\n",
    "#         dPy = (sqrtp_cur - sqrtp_pa) \n",
    "#         return dL*dPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dc448e92-a532-4dcc-9e1b-2bd76ddc1a1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instantiation Parameters\n",
    "n_steps = 2000     # Number of steps \n",
    "start_price = 10 # Initial price SYS/USD\n",
    "mu = 0.1; sigma = 0.5\n",
    "n_paths = 1      # Number of simulationed paths\n",
    "seconds_year = 31536000\n",
    "\n",
    "# Brownian Model \n",
    "bm = BrownianModel(start_price)\n",
    "p_arr = bm.gen_gbms(mu, sigma, n_steps-1, n_paths).flatten()\n",
    "\n",
    "dt = datetime.timedelta(seconds=seconds_year/n_steps)\n",
    "dates = [datetime.datetime.strptime(\"2024-09-01\", '%Y-%m-%d') + k*dt for k in range(n_steps)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c0f9188-ad12-4f3e-81fa-4cf84af8ba1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exchange TKN1-TKN2 (LP)\n",
      "Reserves: TKN1 = 1000.0, TKN2 = 10000.0\n",
      "Liquidity: 3162.2776601683795 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "user_nm = 'user0'\n",
    "tkn1_amount = 1000\n",
    "tkn2_amount = p_arr[0]*tkn1_amount\n",
    "\n",
    "tkn1_nm = 'TKN1'\n",
    "tkn2_nm = 'TKN2'\n",
    "\n",
    "tkn1 = ERC20('TKN1', \"0x111\")\n",
    "tkn2 = ERC20('TKN2', \"0x09\")\n",
    "exchg_data = UniswapExchangeData(tkn0 = tkn1, tkn1 = tkn2, symbol=\"LP\", address=\"0x011\")\n",
    "\n",
    "factory = UniswapFactory(\"pool factory\", \"0x2\")\n",
    "lp = factory.deploy(exchg_data)\n",
    "Join().apply(lp, user_nm, tkn1_amount, tkn2_amount)\n",
    "\n",
    "lp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9515c0d1-b996-48f3-8d3a-ed00478425f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exchange TKN1-TKN2 (LP)\n",
      "Reserves: TKN1 = 1010.0, TKN2 = 10100.0\n",
      "Liquidity: 3193.900436770063 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "out = AddLiquidity().apply(lp, tkn1, user_nm, 10)\n",
    "lp.summary()\n",
    "\n",
    "dL = lp.get_last_liquidity_deposit()\n",
    "iLoss = UniswapImpLoss(lp, dL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7c672056-87cb-465a-ae58-a749c864c421",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial TKN1 amount: 10.00, Initial TKN2 amount: 100.00\n",
      "Hold TKN1 amount: 20.00, Hold TKN2 amount: 200.00\n"
     ]
    }
   ],
   "source": [
    "tkn1_init_amt = iLoss.get_init_amt(tkn1)\n",
    "tkn2_init_amt = iLoss.get_init_amt(tkn2)\n",
    "tkn1_hold_amt = iLoss.hold_value(tkn1)\n",
    "tkn2_hold_amt = iLoss.hold_value(tkn2)\n",
    "\n",
    "print(f'Initial {tkn1.token_name} amount: {tkn1_init_amt:.2f}, Initial {tkn2.token_name} amount: {tkn2_init_amt:.2f}')\n",
    "print(f'Hold {tkn1.token_name} amount: {tkn1_hold_amt:.2f}, Hold {tkn2.token_name} amount: {tkn2_hold_amt:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "143bf2dd-004d-499d-9b48-4e27083d8e55",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exchange TKN1-TKN2 (LP)\n",
      "Reserves: TKN1 = 1823.6593970342024, TKN2 = 16318.81724456412\n",
      "Liquidity: 4789.9949450540735 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "arb = CorrectReserves(lp, x0 = p_arr[0])\n",
    "TKN_amt = TokenDeltaModel(100)\n",
    "pTKN1_TKN2_arr = []; \n",
    "\n",
    "for k in range(n_steps):\n",
    "\n",
    "    # *****************************\n",
    "    # ***** Random Swapping ******\n",
    "    # *****************************\n",
    "    Swap().apply(lp, tkn1, user_nm, TKN_amt.delta())\n",
    "    Swap().apply(lp, tkn2, user_nm, p_arr[k]*TKN_amt.delta())\n",
    "    \n",
    "    # *****************************\n",
    "    # ***** Rebalance ******\n",
    "    # *****************************\n",
    "    arb.apply(p_arr[k])\n",
    "\n",
    "    # *****************************\n",
    "    # ******* Data Capture ********\n",
    "    # *****************************\n",
    "    pTKN1_TKN2_arr.append(LPQuote().get_price(lp, tkn1))\n",
    "\n",
    "lp.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "95848db9-c7f5-4985-9c23-50e7e5882d86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x14fa8cbb0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n_steps = 1000\n",
    "alphas = np.linspace(0, 5, num=n_steps)\n",
    "alpha_deltas = alphas-1\n",
    "\n",
    "imp_loss = np.array([iLoss.calc_iloss(alpha) for alpha in alphas])\n",
    "\n",
    "m0 = 10; m1 = 100\n",
    "fig, (lp_ax) = plt.subplots(nrows=1, sharex=True, sharey=False, figsize=(12, 5))\n",
    "fig.suptitle(f'Impermanent Loss: Uni V2', fontsize=20)\n",
    "lp_ax.plot(100*alphas[m0:-m1]-100, 100*imp_loss[m0:-m1], label = f'Uni V2') \n",
    "lp_ax.set_xlabel(\"Price Chg (%)\", fontsize=12)\n",
    "lp_ax.set_ylabel(\"Impermanent Loss (%)\", fontsize=14)  \n",
    "lp_ax.legend(fontsize=10, facecolor=\"lightgray\", loc='lower right')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e75361f8-0686-48a6-9acc-8d80b17f610b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TKN1 hold amt: 21.18, TKN2 hold amt: 189.48\n",
      "TKN1 position amt: 23.96, TKN2 position amt: 214.44\n",
      "Start price: 10.00, End price: 10.06\n"
     ]
    }
   ],
   "source": [
    "tkn1_hold_amt = iLoss.hold_value(tkn1)\n",
    "tkn2_hold_amt = iLoss.hold_value(tkn2)\n",
    "tkn1_pos_amt = iLoss.current_position_value(tkn1)\n",
    "tkn2_pos_amt = iLoss.current_position_value(tkn2)\n",
    "\n",
    "print(f'{tkn1.token_name} hold amt: {tkn1_hold_amt:.2f}, {tkn2.token_name} hold amt: {tkn2_hold_amt:.2f}')\n",
    "print(f'{tkn1.token_name} position amt: {tkn1_pos_amt:.2f}, {tkn2.token_name} position amt: {tkn2_pos_amt:.2f}')\n",
    "print(f'Start price: {p_arr[0]:.2f}, End price: {p_arr[1]:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f64d3f78-e98e-4213-a4dc-e3aa5cf710c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imp Loss: -0.15%, returns: 13.17 %\n"
     ]
    }
   ],
   "source": [
    "iloss_calc = iLoss.apply(fees = False)\n",
    "returns_calc = iLoss.apply(fees = True)\n",
    "\n",
    "print(f'Imp Loss: {100*iloss_calc:.2f}%, returns: {100*returns_calc:.2f} %')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0rc2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
